{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"image-button-response\",\n  parameters: {\n    /** The image to be displayed */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Set the image height in pixels */\n    stimulus_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Image height\",\n      default: null,\n    },\n    /** Set the image width in pixels */\n    stimulus_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Image width\",\n      default: null,\n    },\n    /** Maintain the aspect ratio after setting width or height */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Maintain aspect ratio\",\n      default: true,\n    },\n    /** Array containing the label(s) for the button(s). */\n    choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Choices\",\n      default: undefined,\n      array: true,\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n     * If false, the image will be shown via an img element.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Render on canvas\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **image-button-response**\n *\n * jsPsych plugin for displaying an image stimulus and getting a button response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-image-button-response/ image-button-response plugin documentation on jspsych.org}\n */\nclass ImageButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var height, width;\n    var html;\n    if (trial.render_on_canvas) {\n      var image_drawn = false;\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create canvas element and image\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-button-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      var ctx = canvas.getContext(\"2d\");\n      var img = new Image();\n      img.onload = () => {\n        // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n        if (!image_drawn) {\n          getHeightWidth(); // only possible to get width/height after image loads\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n      };\n      img.src = trial.stimulus;\n      // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n      const getHeightWidth = () => {\n        if (trial.stimulus_height !== null) {\n          height = trial.stimulus_height;\n          if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (trial.stimulus_width !== null) {\n          width = trial.stimulus_width;\n          if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n          }\n        } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        canvas.height = height;\n        canvas.width = width;\n      };\n      getHeightWidth(); // call now, in case image loads immediately (is cached)\n      // create buttons\n      var buttons = [];\n      if (Array.isArray(trial.button_html)) {\n        if (trial.button_html.length == trial.choices.length) {\n          buttons = trial.button_html;\n        } else {\n          console.error(\n            \"Error in image-button-response plugin. The length of the button_html array does not equal the length of the choices array\"\n          );\n        }\n      } else {\n        for (var i = 0; i < trial.choices.length; i++) {\n          buttons.push(trial.button_html);\n        }\n      }\n      var btngroup_div = document.createElement(\"div\");\n      btngroup_div.id = \"jspsych-image-button-response-btngroup\";\n      html = \"\";\n      for (var i = 0; i < trial.choices.length; i++) {\n        var str = buttons[i].replace(/%choice%/g, trial.choices[i]);\n        html +=\n          '<div class=\"jspsych-image-button-response-button\" style=\"display: inline-block; margin:' +\n          trial.margin_vertical +\n          \" \" +\n          trial.margin_horizontal +\n          '\" id=\"jspsych-image-button-response-button-' +\n          i +\n          '\" data-choice=\"' +\n          i +\n          '\">' +\n          str +\n          \"</div>\";\n      }\n      btngroup_div.innerHTML = html;\n      // add canvas to screen and draw image\n      display_element.insertBefore(canvas, null);\n      if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n        // if image has loaded and width/height have been set, then draw it now\n        // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n        ctx.drawImage(img, 0, 0, width, height);\n        image_drawn = true;\n      }\n      // add buttons to screen\n      display_element.insertBefore(btngroup_div, canvas.nextElementSibling);\n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n      }\n    } else {\n      // display stimulus as an image element\n      html = '<img src=\"' + trial.stimulus + '\" id=\"jspsych-image-button-response-stimulus\">';\n      //display buttons\n      var buttons = [];\n      if (Array.isArray(trial.button_html)) {\n        if (trial.button_html.length == trial.choices.length) {\n          buttons = trial.button_html;\n        } else {\n          console.error(\n            \"Error in image-button-response plugin. The length of the button_html array does not equal the length of the choices array\"\n          );\n        }\n      } else {\n        for (var i = 0; i < trial.choices.length; i++) {\n          buttons.push(trial.button_html);\n        }\n      }\n      html += '<div id=\"jspsych-image-button-response-btngroup\">';\n\n      for (var i = 0; i < trial.choices.length; i++) {\n        var str = buttons[i].replace(/%choice%/g, trial.choices[i]);\n        html +=\n          '<div class=\"jspsych-image-button-response-button\" style=\"display: inline-block; margin:' +\n          trial.margin_vertical +\n          \" \" +\n          trial.margin_horizontal +\n          '\" id=\"jspsych-image-button-response-button-' +\n          i +\n          '\" data-choice=\"' +\n          i +\n          '\">' +\n          str +\n          \"</div>\";\n      }\n      html += \"</div>\";\n      // add prompt\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n      // update the page content\n      display_element.innerHTML = html;\n\n      // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n      var img = display_element.querySelector(\n        \"#jspsych-image-button-response-stimulus\"\n      ) as HTMLImageElement;\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n        }\n      } else {\n        height = img.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = img.naturalWidth;\n      }\n      img.style.height = height.toString() + \"px\";\n      img.style.width = width.toString() + \"px\";\n    }\n\n    // start timing\n    var start_time = performance.now();\n\n    for (var i = 0; i < trial.choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-image-button-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-image-button-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-image-button-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-image-button-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`div[data-choice=\"${data.response}\"] button`),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default ImageButtonResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","IMAGE","pretty_name","default","undefined","stimulus_height","INT","stimulus_width","maintain_aspect_ratio","BOOL","choices","STRING","array","button_html","HTML_STRING","prompt","stimulus_duration","trial_duration","margin_vertical","margin_horizontal","response_ends_trial","render_on_canvas","ImageButtonResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","height","width","html","_this","image_drawn","hasChildNodes","firstChild","removeChild","canvas","document","createElement","id","style","margin","padding","ctx","getContext","img","Image","onload","getHeightWidth","drawImage","src","naturalWidth","naturalHeight","buttons","Array","isArray","length","console","error","i","push","btngroup_div","str","replace","innerHTML","insertBefore","complete","Number","isFinite","nextElementSibling","insertAdjacentHTML","querySelector","toString","start_time","performance","now","addEventListener","e","after_response","currentTarget","getAttribute","response","rt","button","end_trial","pluginAPI","clearAllTimeouts","trial_data","finishTrial","choice","end_time","Math","round","parseInt","className","btns","querySelectorAll","setAttribute","setTimeout","visibility","warn","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","sampleExGaussian","randomInt","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","clickTarget","concat"],"mappings":"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"}